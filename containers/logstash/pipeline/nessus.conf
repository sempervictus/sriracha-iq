input {
	beats {
		port => 5001
		type => "nessus"
		client_inactivity_timeout => 0
	}
}

filter {
  ##interpret the message as XML
	if [type] == "nessus" {
		xml {
			source => "message"
			store_xml => "false"
			force_array => "false"
			xpath => ["/NessusClientData_v2/Report//ReportHost", ReportHost]
			xpath => ["/NessusClientData_v2/Policy/Preferences/ServerPreferences/preference/name[text() = 'report_task_id']/following-sibling::value//text()", scan_id]
			xpath => ["/NessusClientData_v2/Policy/policyName/text()", scan_name]
		}
		
		split {
			field => "[ReportHost]"
		}
		
		mutate {
			remove_field => ["message"]
		}
		
		xml {
			source => "ReportHost"
			store_xml => "false"
			force_array => "false"
			xpath => ["/ReportHost/HostProperties/tag[@name='host-ip']/text()", "host.ip"]
			xpath => ["/ReportHost/HostProperties/tag[@name='host-fqdn']/text()", "host.hostname"]
			xpath => ["/ReportHost/HostProperties/tag[@name='mac-address']/text()", "host.mac"]
			xpath => ["/ReportHost/HostProperties/tag[@name='os']/text()", "os.family"]
			xpath => ["/ReportHost/HostProperties/tag[@name='operating-system']/text()", "os.full"]			
			xpath => ["/ReportHost/HostProperties/tag[@name='patch-summary-total-cves']/text()", patch_summary_total_cves]
			xpath => ["/ReportHost/HostProperties/tag[@name='system-type']/text()", "host.type"]
			xpath => ["/ReportHost/HostProperties/tag[@name='HOST_START']/text()", scan_start]
			xpath => ["/ReportHost/HostProperties/tag[@name='HOST_END']/text()", scan_end]
			xpath => ["/ReportHost//ReportItem", ReportItem]
			add_field => { "vulnerability.scanner.vendor" => "Tenable" }
		}
		
		mutate {
			remove_field => ["ReportHost"]
		}
		
		split {
			field => "[ReportItem]"
		}
		
		xml {
			source => "ReportItem"
			store_xml => "false"
			xpath => ["/ReportItem/@pluginName", plugin_name]
			xpath => ["/ReportItem/@pluginID", plugin_id]
			xpath => ["/ReportItem/@pluginFamily", plugin_family]
			xpath => ["/ReportItem/@severity", severity_score]
			xpath => ["/ReportItem/@port", port]
			xpath => ["/ReportItem/description/text()", "vulnerability.description"]
			xpath => ["/ReportItem/plugin_output/text()", plugin_output]
			xpath => ["/ReportItem/synopsis/text()", synopsis]
			xpath => ["/ReportItem/risk_factor/text()", "vulnerability.severity"]
			xpath => ["/ReportItem/cve/text()", "vulnerability.id"]

			xpath => ["/ReportItem/cvss_vector/text()", "cvss_vector"]
			xpath => ["/ReportItem/cvss_base_score/text()", "cvss_base_score"]
			xpath => ["/ReportItem/cvss_temporal_score/text()", "cvss_temporal_score"]
			xpath => ["/ReportItem/cvss_temporal_vector/text()", "cvss_temporal_vector"]
			xpath => ["/ReportItem/cvss3_vector/text()", "cvss3_vector"]
			xpath => ["/ReportItem/cvss3_base_score/text()", "cvss3_base_score"]
			xpath => ["/ReportItem/cvss3_temporal_score/text()", "cvss3_temporal_score"]
			xpath => ["/ReportItem/cvss3_temporal_vector/text()", "cvss3_temporal_vector"]

			xpath => ["/ReportItem/exploit_available/text()", "exploit_available"]
			xpath => ["/ReportItem/exploit_framework_core/text()", "exploit_framework_core"]
			xpath => ["/ReportItem/exploitability_ease/text()", "exploitability_ease"]
			xpath => ["/ReportItem/fname/text()", "fname"]
			xpath => ["/ReportItem/iava/text()", "iava"]
			xpath => ["/ReportItem/msft/text()", "msft"]
			xpath => ["/ReportItem/mskb/text()", "mskb"]
			xpath => ["/ReportItem/osvdb/text()", "osvdb"]
			xpath => ["/ReportItem/stig_severity/text()", "stig_severity"]

		}

		mutate {
			convert => {
				"cvss_base_score" => "float"
				"cvss_temporal_score" => "float"
				"cvss3_base_score" => "float"
				"cvss3_temporal_score" => "float"
			}
		} 
		
		mutate {
			remove_field => ["ReportItem"]
		}
		
		date {
			match => ["scan_start", "ISO8601", "EEE MMM d HH:mm:ss yyyy", "EEE MMM dd HH:mm:ss yyyy", "EEE MMM  dd HH:mm:ss yyyy"]
			target => "scan_start"
			locale => "en_US"
		}
		
		date {
			match => ["scan_end", "ISO8601", "EEE MMM d HH:mm:ss yyyy", "EEE MMM dd HH:mm:ss yyyy", "EEE MMM  dd HH:mm:ss yyyy"]
			target => "scan_end"
			locale => "en_US"
		}
		geoip {
			source => "[host.ip]"
			#TODO: add real maxmind DB into container and place path here
		}
	}
}

output {
	elasticsearch { 
		hosts => ["elasticsearch:9200"]
		index => "nessus-${ELASTIC_VERSION}-%{+YYYY.MM.dd}"
		ilm_rollover_alias => "nessus-${ELASTIC_VERSION}"
		id => "nessus"
		user => "${ELASTIC_USER}"
		password => "${ELASTIC_PASSWORD}"
	}
}
